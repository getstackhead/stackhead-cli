name: Test CLI

on:
  pull_request:
    types: [opened, labeled, unlabeled, synchronize]
    branches:
      - master
      - next

env:
  STACKHEAD_VERSION: next

jobs:

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:

      - name: Set up Go 1.13
        uses: actions/setup-go@v1
        with:
          go-version: 1.13
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Build
        run: go build -v -o bin/stackhead-cli

      - uses: actions/upload-artifact@v2
        with:
          name: stackhead-cli
          path: bin/stackhead-cli

  test-unit:
    name: Unit Test
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go 1.13
        uses: actions/setup-go@v1
        with:
          go-version: 1.13
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Test
        run: go test ./...

  test-validation:
    name: Test validation
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Remove Python 2 and old Ansible 2.9 version
        run: sudo apt purge python ansible -y
      - name: Set up Python 3
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Install Ansible v2.10.3 (GH actions currently uses 2.9)
        run: pip install ansible==2.10.3
      - name: Print Ansible and Python version
        run: ansible --version && python --version
      - name: Download StackHead CLI artifact
        uses: actions/download-artifact@v2
        with:
          name: stackhead-cli
          path: /home/runner/bin
      - name: Set execution permission on binary
        run: chmod +x /home/runner/bin/stackhead-cli
        working-directory: /home/runner/bin
      - name: Perform validation tests
        run: |
          /home/runner/bin/stackhead-cli init --version ${{ env.STACKHEAD_VERSION }} -v
          git clone --depth=1 --branch ${{ env.STACKHEAD_VERSION }} https://github.com/getstackhead/stackhead.git stackhead_repo
          /home/runner/bin/stackhead-cli cli validate ./schemas/examples/cli-config/valid/cli.yml
          /home/runner/bin/stackhead-cli module validate ./stackhead_repo/ansible/schemas/examples/module-config/valid/container-module.yml
          /home/runner/bin/stackhead-cli project validate ./stackhead_repo/ansible/schemas/examples/project-definition/valid/project.stackhead.yml
          /home/runner/bin/stackhead-cli project validate ./stackhead_repo/ansible/schemas/examples/project-definition/valid/project-secured.stackhead.yaml

          cp ./stackhead_repo/ansible/schemas/examples/project-definition/valid/project.stackhead.yml ./stackhead_repo/ansible/schemas/examples/project-definition/invalid/project.yml
          /home/runner/bin/stackhead-cli project validate ./stackhead_repo/ansible/schemas/examples/project-definition/invalid/project.yml && returncode=$? || returncode=$?
          if [ $returncode -eq 0 ]; then
            echo "File above should not have validated due to invalid file extension!"
            exit 1
          fi
